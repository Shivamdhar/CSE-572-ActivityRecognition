% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 16-Feb-2019 01:37:16
%
% This script assumes these variables are defined:
%
%   irisInputs - input data.
%   irisTargets - target data.

combinedfinal = removevars(trainuserindependent,{'VarName1'});
combinedfinal_test = removevars(testuserindependent,{'VarName1'});
gt = combinedfinal(:,{'groundtruth'});
gt_test = combinedfinal_test(:,{'groundtruth'});
array = table2array(gt);
array_test = table2array(gt_test);
gt_new = cellstr(array);
gt_new_test = cellstr(array_test);
gt_class_labels = grp2idx(gt_new);
gt_class_labels_test = grp2idx(gt_new_test);
combinedfinal = removevars(combinedfinal,{'groundtruth'});
combinedfinal_test = removevars(combinedfinal_test,{'groundtruth'});
X_train = combinedfinal(:,:);
Y_train = gt_class_labels(:,:);
X_test = combinedfinal_test(:,:);
Y_test = gt_class_labels_test(:,:);

X_train = table2array(X_train);
X_test = table2array(X_test);
% x = irisInputs;
% t = irisTargets;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = 10;
net = patternnet(hiddenLayerSize, trainFcn);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivision
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'sample';  % Divide up every sample
% net.divideParam.trainRatio = 60/100;
% net.divideParam.valRatio = 20/100;
% net.divideParam.testRatio = 20/100;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'crossentropy';  % Cross-Entropy

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
    'plotconfusion', 'plotroc'};

x = size(Y_train);
temp1 = zeros(x(1),1);
temp2 = zeros(x(1),1);

for k=1:x(1)
    if Y_train(k) == 1
        temp1(k) = 1;
    else
        temp2(k) = 1;
    end
end

Y_train = [temp1 temp2];

% Train the Network
[net,tr] = train(net,transpose(X_train),transpose(Y_train));

% Test the Network
x = size(Y_test);
temp1 = zeros(x(1),1);
temp2 = zeros(x(1),1);

for k=1:x(1)
    if Y_test(k) == 1
        temp1(k) = 1;
    else
        temp2(k) = 1;
    end
end

Y_test = [temp1 temp2];
y = net(transpose(X_test));
e = gsubtract(transpose(Y_test),y);
Y_test = transpose(Y_test)
performance = perform(net,Y_test,y)
tind = vec2ind(Y_test);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% Recalculate Training, Validation and Test Performance
trainTargets = t .* tr.trainMask{1};
valTargets = t .* tr.valMask{1};
testTargets = t .* tr.testMask{1};
trainPerformance = perform(net,trainTargets,y)
valPerformance = perform(net,valTargets,y)
testPerformance = perform(net,testTargets,y)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotconfusion(t,y)
%figure, plotroc(t,y)

% Deployment
% Change the (false) values to (true) to enable the following code blocks.
% See the help for each generation function for more information.
if (false)
    % Generate MATLAB function for neural network for application
    % deployment in MATLAB scripts or with MATLAB Compiler and Builder
    % tools, or simply to examine the calculations your trained neural
    % network performs.
    genFunction(net,'myNeuralNetworkFunction');
    y = myNeuralNetworkFunction(X_train);
end
if (false)
    % Generate a matrix-only MATLAB function for neural network code
    % generation with MATLAB Coder tools.
    genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
    y = myNeuralNetworkFunction(X_train);
end
if (false)
    % Generate a Simulink diagram for simulation or deployment with.
    % Simulink Coder tools.
    gensim(net);
end
